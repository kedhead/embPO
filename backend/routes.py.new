from flask import jsonify, request, render_template, current_app
from extensions import app, db, logger, mail
from models import PurchaseOrder
from flask_mail import Message
from datetime import datetime
import os
import uuid
import weasyprint
import tempfile

@app.route('/api/purchase-orders', methods=['GET'])
def get_purchase_orders():
    orders = PurchaseOrder.query.all()
    return jsonify([order.to_dict() for order in orders])

@app.route('/api/purchase-orders/<string:order_id>', methods=['GET'])
def get_purchase_order(order_id):
    order = PurchaseOrder.query.get_or_404(order_id)
    return jsonify(order.to_dict())

@app.route('/api/purchase-orders', methods=['POST'])
def create_purchase_order():
    try:
        data = request.get_json()
        logger.debug(f"Received purchase order data: {data}")
        
        if not data:
            logger.error("No JSON data received in request")
            return jsonify({"error": "No data provided"}), 400

        # Validate required fields
        required_fields = ['customer', 'lineItems', 'subtotal', 'taxRate', 'taxAmount', 'total']
        missing_fields = [field for field in required_fields if field not in data]
        if missing_fields:
            logger.error(f"Missing required fields in request: {missing_fields}")
            return jsonify({"error": f"Missing required fields: {', '.join(missing_fields)}"}), 400

        # Create a new purchase order
        order_number = f"PO-{datetime.now().strftime('%Y%m%d')}-{uuid.uuid4().hex[:6].upper()}"
        new_order = PurchaseOrder(
            id=uuid.uuid4().hex,
            order_number=order_number,
            customer=data['customer'],
            line_items=data['lineItems'],
            subtotal=data['subtotal'],
            tax_rate=data['taxRate'],
            tax_amount=data['taxAmount'],
            total=data['total'],
            status=data.get('status', 'draft'),
            notes=data.get('notes', ''),
            created_at=datetime.now(),
            due_date=datetime.strptime(data['dueDate'], '%Y-%m-%d') if 'dueDate' in data and data['dueDate'] else None
        )
        
        db.session.add(new_order)
        db.session.commit()
        logger.info(f"Created new purchase order with ID {new_order.id}")
        return jsonify(new_order.to_dict()), 201
        
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Error creating purchase order: {error_msg}")
        db.session.rollback()
        return jsonify({"error": error_msg}), 500

@app.route('/api/purchase-orders/<string:order_id>', methods=['PUT'])
def update_purchase_order(order_id):
    try:
        data = request.get_json()
        logger.debug(f"Received update data for order {order_id}: {data}")
        
        if not data:
            logger.error("No JSON data received in request")
            return jsonify({"error": "No data provided"}), 400

        order = PurchaseOrder.query.get_or_404(order_id)
        if not order:
            logger.error(f"Purchase order not found with ID {order_id}")
            return jsonify({"error": f"Purchase order with ID {order_id} not found"}), 404
        
        # Update fields
        if 'customer' in data:
            order.customer = data['customer']
        if 'lineItems' in data:
            order.line_items = data['lineItems']
        if 'subtotal' in data:
            order.subtotal = data['subtotal']
        if 'taxRate' in data:
            order.tax_rate = data['taxRate']
        if 'taxAmount' in data:
            order.tax_amount = data['taxAmount']
        if 'total' in data:
            order.total = data['total']
        if 'status' in data:
            order.status = data['status']
        if 'notes' in data:
            order.notes = data['notes']
        if 'dueDate' in data and data['dueDate']:
            order.due_date = datetime.strptime(data['dueDate'], '%Y-%m-%d')
        
        db.session.commit()
        logger.info(f"Successfully updated purchase order {order_id}")
        return jsonify(order.to_dict())

    except Exception as e:
        logger.error(f"Error updating purchase order {order_id}: {str(e)}")
        db.session.rollback()
        return jsonify({"error": str(e)}), 500

@app.route('/api/purchase-orders/<string:order_id>', methods=['DELETE'])
def delete_purchase_order(order_id):
    try:
        order = PurchaseOrder.query.get_or_404(order_id)
        if not order:
            return jsonify({"error": f"Purchase order with ID {order_id} not found"}), 404
        
        logger.info(f"Attempting to delete purchase order {order_id}")
        db.session.delete(order)
        db.session.commit()
        logger.info(f"Successfully deleted purchase order {order_id}")
        return '', 204
    except Exception as e:
        error_msg = str(e)
        logger.error(f"Error deleting purchase order {order_id}: {error_msg}")
        db.session.rollback()
        return jsonify({"error": error_msg}), 500

@app.route('/api/purchase-orders/<string:order_id>/generate-pdf', methods=['GET'])
def generate_purchase_order_pdf(order_id):
    """Generate a PDF of the purchase order"""
    try:
        # Get the purchase order
        order = PurchaseOrder.query.get_or_404(order_id)
        
        # Convert order to dictionary for the template
        order_dict = order.to_dict()
        
        # Render the HTML template
        html = render_template('pdf/purchase_order.html', order=order_dict)
        
        # Create a temporary file
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
            pdf_path = temp_file.name
            
        # Generate PDF from HTML
        weasyprint.HTML(string=html).write_pdf(pdf_path)
        
        return jsonify({
            'success': True,
            'message': 'PDF generated successfully',
            'pdf_path': pdf_path
        })
    
    except Exception as e:
        logger.error(f"Error generating PDF: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Error generating PDF: {str(e)}'
        }), 500

@app.route('/api/purchase-orders/<string:order_id>/email', methods=['POST'])
def email_purchase_order(order_id):
    """Send the purchase order as a PDF via email"""
    try:
        # Get request data
        data = request.get_json()
        recipient_email = data.get('email')
        email_subject = data.get('subject', 'Your Purchase Order from StitchPay')
        email_message = data.get('message', '')
        
        if not recipient_email:
            return jsonify({
                'success': False,
                'message': 'Recipient email is required'
            }), 400
        
        # First generate the PDF
        order = PurchaseOrder.query.get_or_404(order_id)
        order_dict = order.to_dict()
        
        # Render the HTML template for the PDF
        pdf_html = render_template('pdf/purchase_order.html', order=order_dict)
        
        # Create a temporary file for the PDF
        with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
            pdf_path = temp_file.name
        
        # Generate PDF from HTML
        weasyprint.HTML(string=pdf_html).write_pdf(pdf_path)
        
        # Prepare the email        msg = Message(
            subject=email_subject,
            recipients=[recipient_email],
            html=render_template(
                'email/po_email.html',
                order_number=order_dict.get('orderNumber', order_dict.get('order_number', '')),
                customer_name=order_dict['customer']['name'],
                order_date=order_dict.get('createdAt', order_dict.get('created_at', '')),
                total=f"{order_dict['total']:.2f}",
                current_year=datetime.now().year
            )
        )
        
        # Attach the PDF
        with open(pdf_path, 'rb') as pdf:
            msg.attach(
                filename=f"PurchaseOrder_{order_dict.get('orderNumber', order_dict.get('order_number', 'unknown'))}.pdf",
                content_type='application/pdf',
                data=pdf.read()
            )
        
        # Send the email
        mail.send(msg)
        
        # Clean up the temporary file
        os.unlink(pdf_path)
        
        return jsonify({
            'success': True,
            'message': f'Purchase order emailed to {recipient_email}'
        })
    
    except Exception as e:
        logger.error(f"Error sending email: {str(e)}")
        return jsonify({
            'success': False,
            'message': f'Error sending email: {str(e)}'
        }), 500
